---
import MainLayout from "../layouts/MainLayout.astro";
import TripIntro from "../components/TripIntro.astro";
import DatesPrices from "../components/DatesPrices.astro";
import TripProgram from "../components/TripProgram.astro";
import WhatsIncluded from "../components/WhatsIncluded.astro";
import Sustainability from "../components/Sustainability.astro";
---

<MainLayout title="Single View">
  <!-- Scroll Progress Bar -->
  <div
    id="scroll-progress"
    class="fixed top-0 left-0 h-1 bg-gradient-to-r from-primary to-orange-400 z-50 transition-all duration-100"
    style="width: 0%; box-shadow: 0 0 10px rgba(255, 89, 0, 0.5);"
  >
  </div>

  <!-- Bitmap graphics background -->
  <div class="fixed inset-0 pointer-events-none z-0 overflow-hidden">
    <!-- Particle Canvas for bitmap graphics -->
    <canvas id="particle-canvas" class="w-full h-full" style="opacity: 0.3;"
    ></canvas>

    <!-- Animated gradient orbs -->
    <div
      class="absolute top-0 right-0 w-96 h-96 bg-primary opacity-10 rounded-full blur-3xl animate-float"
    >
    </div>
    <div
      class="absolute bottom-0 left-0 w-80 h-80 bg-orange-400 opacity-10 rounded-full blur-3xl animate-pulse"
    >
    </div>
  </div>

  <!-- /*************************************************/ TRIP INTRO /*************************************************/ -->
  <section
    id="trip-intro"
    class="animate-section opacity-0"
    data-animation="fade-up"
  >
    <TripIntro />
  </section>

  <!-- /*************************************************/ DATES & PRICES /*************************************************/ -->
  <section
    id="dates-prices"
    class="animate-section opacity-0"
    data-animation="fade-up"
  >
    <DatesPrices />
  </section>
  <!-- /*************************************************/ GIF SECTION /*************************************************/ -->
  <img src="/img/flyrute1.gif" alt="Flyrute" />

  <!-- /*************************************************/ TRIP PROGRAM /*************************************************/ -->
  <section
    id="trip-program"
    class="animate-section opacity-0"
    data-animation="fade-up"
  >
    <TripProgram />
  </section>

  <!-- /*************************************************/ WHAT'S INCLUDED /*************************************************/ -->
  <section
    id="whats-included"
    class="animate-section opacity-0"
    data-animation="fade-up"
  >
    <WhatsIncluded />
  </section>

  <!-- /*************************************************/ SUSTAINABILITY /*************************************************/ -->
  <section
    id="sustainability"
    class="animate-section opacity-0"
    data-animation="fade-up"
  >
    <Sustainability />
  </section>
</MainLayout>

<style>
  /* Animation keyframes */
  @keyframes fadeUp {
    from {
      opacity: 0;
      transform: translateY(40px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes slideRight {
    from {
      opacity: 0;
      transform: translateX(-40px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Animation classes */
  .animate-section {
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .animate-section.visible {
    opacity: 1 !important;
  }

  .animate-section[data-animation="fade-up"].visible {
    animation: fadeUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .animate-section[data-animation="scale"].visible {
    animation: scaleIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .animate-section[data-animation="slide-right"].visible {
    animation: slideRight 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Particle canvas */
  #particle-canvas {
    mix-blend-mode: screen;
  }
</style>

<script>
  // Intersection Observer for scroll animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: "0px 0px -100px 0px",
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
      if (entry.isIntersecting) {
        // Add stagger delay based on index
        setTimeout(() => {
          entry.target.classList.add("visible");
        }, index * 150);
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all animation sections
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll(".animate-section");
    sections.forEach((section) => observer.observe(section));

    // Initialize particle system
    initParticles();
  });

  // Bitmap-based particle system
  function initParticles() {
    const canvas = document.getElementById(
      "particle-canvas"
    ) as HTMLCanvasElement;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Set canvas size
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    resizeCanvas();
    window.addEventListener("resize", resizeCanvas);

    // Particle class
    class Particle {
      x: number;
      y: number;
      size: number;
      speedX: number;
      speedY: number;
      color: string;
      opacity: number;

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 3 + 1;
        this.speedX = (Math.random() - 0.5) * 0.5;
        this.speedY = (Math.random() - 0.5) * 0.5;
        // Orange theme colors
        const colors = ["#ff5900", "#ff8c42", "#ffa566", "#ffb880"];
        this.color = colors[Math.floor(Math.random() * colors.length)];
        this.opacity = Math.random() * 0.5 + 0.2;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;

        // Wrap around screen
        if (this.x > canvas.width) this.x = 0;
        if (this.x < 0) this.x = canvas.width;
        if (this.y > canvas.height) this.y = 0;
        if (this.y < 0) this.y = canvas.height;
      }

      draw() {
        if (!ctx) return;
        ctx.fillStyle = this.color;
        ctx.globalAlpha = this.opacity;

        // Draw pixel-perfect square (bitmap style)
        ctx.fillRect(
          Math.floor(this.x),
          Math.floor(this.y),
          Math.ceil(this.size),
          Math.ceil(this.size)
        );
      }
    }

    // Create particles
    const particles: Particle[] = [];
    const particleCount = 50;

    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle());
    }

    // Animation loop
    function animate() {
      if (!ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      particles.forEach((particle) => {
        particle.update();
        particle.draw();
      });

      // Draw connections between close particles
      ctx.globalAlpha = 0.1;
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            ctx.strokeStyle = "#ff5900";
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.stroke();
          }
        }
      }

      requestAnimationFrame(animate);
    }

    animate();
  }

  // Add entrance animation for the first section
  window.addEventListener("load", () => {
    const firstSection = document.querySelector("#trip-intro");
    if (firstSection) {
      setTimeout(() => {
        firstSection.classList.add("visible");
      }, 300);
    }
  });

  // Scroll progress bar
  const scrollProgress = document.getElementById("scroll-progress");

  window.addEventListener("scroll", () => {
    const scrolled = window.pageYOffset;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrollPercent = (scrolled / height) * 100;

    if (scrollProgress) {
      scrollProgress.style.width = `${scrollPercent}%`;
    }

    // Add subtle parallax effect to sections
    const sections = document.querySelectorAll(".animate-section");
    sections.forEach((section) => {
      const rect = section.getBoundingClientRect();
      const speed = 0.02;

      if (rect.top < window.innerHeight && rect.bottom > 0) {
        const yPos = -(scrolled * speed);
        (section as HTMLElement).style.transform = `translateY(${yPos}px)`;
      }
    });
  });

  // Add smooth scroll behavior
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute("href") || "");
      if (target) {
        target.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      }
    });
  });
</script>
